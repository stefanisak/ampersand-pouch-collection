// Generated by CoffeeScript 1.9.2
(function() {
  var AmpersandCollection, _, sync;

  AmpersandCollection = require('ampersand-collection');

  _ = require('underscore');

  sync = require('ampersand-pouch-sync');

  module.exports = AmpersandCollection.extend({
    initialize: function() {
      return this.sync = sync.apply(this, [this.pouch]);
    },
    getPouchDB: function() {
      return this.sync.pouchDB;
    },
    fetch: function(options) {
      var me, success;
      options = options || {};
      if (options.parse == null) {
        options.parse = true;
      }
      success = options.success;
      me = this;
      options.success = function(response) {
        var method;
        if (options.reset) {
          method = 'reset';
        } else {
          method = 'set';
        }
        me[method](response, options);
        if (success) {
          success(me, response, options);
        }
        return me.trigger('sync', me, response, options);
      };
      return this.sync('read', this, options);
    },
    create: function(model, options) {
      var collection, success;
      options = options || {};
      if (!(model = this._prepareModel(model, options))) {
        return false;
      }
      collection = this;
      success = options.success;
      options.success = function(model, resp) {
        collection.add(model, options);
        if (success) {
          return success(model, resp, options);
        }
      };
      model.save(null, options);
      return model;
    },
    getOrFetch: function(id, options, cb) {
      var done, model, self;
      if (arguments.length !== 3) {
        cb = options;
        options = {};
      }
      self = this;
      model = this.get(id);
      if (model) {
        return cb(null, model);
      }
      done = function() {
        model = self.get(id);
        if (model) {
          if (cb) {
            return cb(null, model);
          } else {
            return cb(new Error('not found'));
          }
        }
      };
      if (options.all) {
        options.success = done;
        options.error = done;
        return this.fetch(options);
      } else {
        return this.fetchById(id, cb);
      }
    },
    fetchById: function(id, cb) {
      var idObj, me, model;
      me = this;
      idObj = {};
      idObj[this.model.prototype.idAttribute] = id;
      model = new this.model(idObj, {
        collection: this
      });
      return model.fetch({
        success: function() {
          me.add(model);
          if (cb) {
            return cb(null, model);
          }
        },
        error: function() {
          delete model.collection;
          if (cb) {
            return cb(Error('not found'));
          }
        }
      });
    },
    parse: function(result) {
      return _.pluck(result.rows, 'doc');
    }
  });

}).call(this);
